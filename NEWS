Noteworthy changes in version `0.7.7'
=====================================

   * Important bugfixes in editor classes.

   * Rearranged some of the editor classes to be in the palettes which
     contain the classes they are responsible for editing
     (GormButtonEditor & GormTabViewEditor).

   * Image and Sound editors will now display system default images or
     sounds if they are available.

   * Document window now uses an NSToolbar (experimental).

   * Improved the layout of some of the inspectors.

   * Corrected some minor issues in the inspectors

   * Added code to allow NSTableView and NSOutlineView to show some
     data during testing

   * Gorm will now show an alert panel when a model fails to load or
     test properly.

Noteworthy changes in version `0.7.6'
=====================================

   This release is mainly a bugfix release for 0.7.5.

   * Improved .gmodel support

   * Corrections to previous repair feature.

   * Important bugfixes for Menu editing.

   * Important bugfixes for class inspector.

Noteworthy changes in version `0.7.5'
=====================================

   * The 'reparent' feature in the class inspector.  This allows the
     user to change the class hierarchy from within Gorm.

   * Some important bugfixes

   * a property 'GormRepairFileOnLoad' (untested) which  should repaire
     old .gorm files... It is HIGHLY recommended that Gorm not be run
     with this on constantly and that you back up any files which you
     want to repair before opening them with this option turned on.

   * A shelf inspector in prefs that lets you expand the size of the
     names in the object view..

   * Support for NSFontManager

   * A way to restore a complete NSMenu if it's deleted (a new palette
     entry for NSMenu, not just an item)

Noteworthy changes in version `0.6.0'
=====================================

   * Several major bugs corrected.

   * Clarified some of the inspectors

   * Menu items are now properly enabled/disabled when appropriate

   * More descriptive title displayed when a class is being edited.

Noteworthy changes in version `0.5.0'
=====================================

   * Enabled defer in NSWindow inspector.

   * Added code to the connection inspector to prevent erroneous
     connections.

   * Added support for upgrading of old .gorm files using the older
     template mechanism

   * Grouping with an NSSplitView now operates using the relative
     positions of the views in the window.

   * Custom Class inspector now shows all subclasses, not just direct
     custom subclasses.

   * Bug fixes, eliminated memory leak, code cleanup, etc.

Noteworthy changes in version `0.4.0'
=====================================

   * New Menu and Menu Item inspectors.

   * User can now specify the Services and Windows menus in the menu
     inspector.

   * User can specify a non-custom subclass as well as a custom one to
     replace the class when the .gorm is unarchived.  This can be used
     to turn a NSTextField into NSSecureTextField and etc.

   * New set name panel.

   * New switch control on the font panel to allow the user to specify
     if a font is encoded with its default size or not.

   * Added NSStepper and NSStepperCell to the class list to allow
     creation of custom subclasses.

   * Windows and Services menus now function correctly.

Noteworthy changes in version `0.3.1'
=====================================

   * New custom class system.

   * Images now persist correctly when added to a button or view.

   * Fixed DND

   * Various bugfixes

Noteworthy changes in version `0.3.0'
=====================================

   * Preferences added.

   * User can now enable and disable guidlines for easier editing.

   * Refactored code into GormLib which is a clone of the
     InterfaceBuilder framework.  This facilitates creating palettes
     and inspectors outside of Gorm.

   * Added class inspector for easier editing of classes.  This gives
     the user the option to use either the outline view or the
     inspector to edit new classes.

   * Added inspectors for the following: NSScrollView,
     NSProgressIndicator, NSColorWell, GormImageInspector (for images
     added to .gorm files).

   * Improved look of NSTabView inspector.

   * Removed all warnings from the code.

   * various bug fixes.

Noteworthy changes in version `0.2.5'.
======================================

   Many fixes and improvements to make the app work better.

   * Better parsing of headers

   * Interface code redone as gorm files.

   * Re-add multiple selection via mouse drag.

Noteworthy changes in version `0.2.0' snapshot.
===============================================

   Gobs of improvements, mostly due to the hard work of Gregory John
Casamento and Pierre-Yves Rivaille. Thanks guys!

   * Custom class support/translations implemented.

   * Added NSScrollView, NSPopupButton, NSOutlineView, NSTableView
     editing.

   * Improved test mode support.

   * Improved drag n' drop support on many items.

   * Intelligent placement hints.

   * Read gmodel files.

   * More inspectors.

   * Sound and Image support.

   * gorm files were changed to directory wrappers for more flexibility.

Noteworthy changes in version `0.1.0'
=====================================

   * load/parses class files for entry into class list.

   * Pallete/inspectors for date and number formatters

   * Pallete/Inspectors for browsers and tableViews

   * NSStepper, NSForm, NSPopupButton  pallete item and inspector

   * Most inspectors greatly improved and fleshed out.

   * Custom views added.

   * Ability to edit cells in a matrix.

   * Ability to change the font of some objects.

Noteworthy changes in version `0.0.3'
=====================================

   * Create stub .m and .h files from new classes

   * Works better with ProjectCenter.

   * Handle Ctrl-Drag and Alt-Drag of objects - automatic conversion to
     matrices and/or increase decrease rows and cols.

   * Edit NSForms titles in place.

   * Edit NSBoxes and add subviews.

   * Support for custom objects.

Noteworthy changes in version `0.0.2'
=====================================

   * Add popup and pulldown menu controls

   * Menu support

   * More inspectors

   * Some support for connections

   * Much more fleshed out - too numerous to mention.

Noteworthy changes in version `0.0.1'
=====================================

   * 8th December 1999

        * Save/Load 'nib' documents (binary archived data)

          This works so far as it can be tested - but that's just
          archives containing windows or panels so far.

        * Load palettes

          Loading of palettes works.  You can load palettes from the
          'Tools' menu.  Gorm automatically loads all the palettes from
          its Resources directory.

        * Basic framework

          So far, the app provides a basic framework that needs
          fleshing out.
             * It has a palettes manager object that allows you to
               select a palette and drag items from the palette into
               your document.

             * It has a special per-document editor object, which keeps
               track of a matrix of icons representing the top-level
               objects in the document.

             * It has an inspector manager class, which updates the
               inspector panel when the selected object is changed by
               an editor.

             * It has special inspectors for handling an empty
               selection or a multiple selection.

        * Palettes

          Four palettes (three of which are empty at present) are built
          and installed in the apps Resources directory.

          The Window palette is more fully fleshed out than the other
          palettes.  It permits windows and panels to be created in
          Gorm.  If provides the start of a window attributes inspector.


   * 18 December 1999

        * You can drag views from a palette into a window or panel.

        * You can select views in a window by clicking on them,
          shift-clicking (for multiple selection), or click-drag on the
          window background to select views in a box.

        * You can delete/cut/copy/paste views betwen windows.

        * You can move views in a window by clicking on them and
          dragging.

        * You can resize views by clicking on their knobs and dragging.

        * You can control-drag to mark source and destination views for
          a connection.

        * Next task - inspectors.

          The connection inspector needs to be implemented to complete
          the process of establishing connections.  The size inspector
          needs to be implemented to set autosizing parameters for a
          view.

          Once these are done, the object editor needs to be made to
          support connections so that we can connect between objects
          other than views, then we need to write a menu editor.


   * 22 December 1999

        * Connections inspector is now working - but it needs some
          effort to tidy it up.

        * Class info (outlets and actions) is specified in
          'ClassInformation.plist' and needs to be present so that the
          app knows what outlets/actions an object has (and therefore
          what connections can be made).

        * The view size inspector is working - allowing you to set the
          size of the subviews within a window.

        * The attributes inspector for 'FilesOwner' is working, so you
          can define the class of the files owner (it defaults to
          NSApplication).

        * There is a crude panel for setting the name of the selected
          object.

        * I've created a couple of new images and got rid of the two
          NeXT images that were lurking in there.

        * There is a Testing directory, with a GormTest application
          that lets you load a nib for testing - it assumes that the
          nib will set its FilesOwners delegate to point to a window,
          and makes that window the key window ...

   * 23 December 1999

     Last work before christmas ...

     Various bits of tidying up plus -

     Added an evil hack of a generic attributes inspector ...  This
     looks through all the methods of the selected object to find those
     taking a single argument and beginning with 'set'.  It makes all
     these setting methods (whose argument is a simple scalar type or
     an object) available for you to invoke from the inspector panel.

     This makes it possible to set pretty much any attribute of any
     object, but you do need to have the GNUstep header files to hand,
     so you can tell what numeric values to enter to achieve a desired
     result.



@c -*-texinfo-*-

@ifset TEXT-ONLY
@include version.texi
@end ifset

@section Noteworthy changes in version @samp{0.2.0} snapshot.

Gobs of improvements, mostly due to the hard work of
Gregory John Casamento and Pierre-Yves Rivaille. Thanks guys!

@itemize @bullet
@item Custom class support/translations implemented.
@item Added NSScrollView, NSPopupButton, NSOutlineView, NSTableView editing.
@item Improved test mode support.
@item Improved drag n' drop support on many items.
@item Intelligent placement hints.
@item Read gmodel files.
@item More inspectors.
@item Sound and Image support.
@item gorm files were changed to directory wrappers for more flexibility.
@end itemize

@c ====================================================================
@c Keep the next line just below the list of changes in most recent version.
@ifclear ANNOUNCE-ONLY

@section Noteworthy changes in version @samp{0.1.0}

@itemize @bullet
@item load/parses class files for entry into class list.
@item Pallete/inspectors for date and number formatters
@item Pallete/Inspectors for browsers and tableViews
@item NSStepper, NSForm, NSPopupButton  pallete item and inspector
@item Most inspectors greatly improved and fleshed out.
@item Custom views added.
@item Ability to edit cells in a matrix.
@item Ability to change the font of some objects.
@end itemize

@section Noteworthy changes in version @samp{0.0.3}

@itemize @bullet
@item Create stub .m and .h files from new classes
@item Works better with ProjectCenter.
@item Handle Ctrl-Drag and Alt-Drag of objects - automatic conversion to
matrices and/or increase decrease rows and cols.
@item Edit NSForms titles in place.
@item Edit NSBoxes and add subviews.
@item Support for custom objects.
@end itemize

@section Noteworthy changes in version @samp{0.0.2}

@itemize @bullet
@item Add popup and pulldown menu controls
@item Menu support
@item More inspectors
@item Some support for connections
@item Much more fleshed out - too numerous to mention.
@end itemize

@section Noteworthy changes in version @samp{0.0.1}

@itemize @bullet

@item 8th December 1999

@itemize @bullet
@item Save/Load 'nib' documents (binary archived data)

This works so far as it can be tested - but that's just archives containing
windows or panels so far.

@item Load palettes

Loading of palettes works.  You can load palettes from the
'Tools' menu.  Gorm automatically loads all the palettes from its Resources
directory.

@item Basic framework

So far, the app provides a basic framework that needs fleshing out.
@itemize @bullet
@item
It has a palettes manager object that allows you to select a palette and
drag items from the palette into your document.

@item
It has a special per-document editor object, which keeps track of a matrix
of icons representing the top-level objects in the document.

@item
It has an inspector manager class, which updates the inspector panel
when the selected object is changed by an editor.

@item
It has special inspectors for handling an empty selection or a multiple
selection.
@end itemize

@item Palettes
 
Four palettes (three of which are empty at present) are built and installed
in the apps Resources directory.

The Window palette is more fully fleshed out than the other palettes.
It permits windows and panels to be created in Gorm.
If provides the start of a window attributes inspector.

@end itemize

@item 18 December 1999

@itemize @bullet
@item
You can drag views from a palette into a window or panel.
@item
You can select views in a window by clicking on them, shift-clicking
(for multiple selection), or click-drag on the window background to select
views in a box.
@item
You can delete/cut/copy/paste views betwen windows.
@item
You can move views in a window by clicking on them and dragging.
@item
You can resize views by clicking on their knobs and dragging.
@item
You can control-drag to mark source and destination views for a connection.

@item Next task - inspectors.

The connection inspector needs to be implemented to complete the process of
establishing connections.
The size inspector needs to be implemented to set autosizing parameters for
a view.

Once these are done, the object editor needs to be made to support connections
so that we can connect between objects other than views, then we need to write
a menu editor.

@end itemize

@item 22 December 1999

@itemize @bullet

@item
Connections inspector is now working - but it needs some effort to tidy it up.
@item
Class info (outlets and actions) is specified in 'ClassInformation.plist'
and needs to be present so that the app knows what outlets/actions an object
has (and therefore what connections can be made).

@item
The view size inspector is working - allowing you to set the size of the
subviews within a window.

@item
The attributes inspector for 'FilesOwner' is working, so you can define the
class of the files owner (it defaults to NSApplication).

@item
There is a crude panel for setting the name of the selected object.

@item
I've created a couple of new images and got rid of the two NeXT images that
were lurking in there.

@item
There is a Testing directory, with a GormTest application that lets you load
a nib for testing - it assumes that the nib will set its FilesOwners delegate
to point to a window, and makes that window the key window ...
@end itemize

@item 23 December 1999

Last work before christmas ...

Various bits of tidying up plus -

Added an evil hack of a generic attributes inspector ...  This looks through
all the methods of the selected object to find those taking a single argument
and beginning with 'set'.  It makes all these setting methods (whose argument
is a simple scalar type or an object) available for you to invoke from the
inspector panel.

This makes it possible to set pretty much any attribute of any object, but
you do need to have the GNUstep header files to hand, so you can tell what
numeric values to enter to achieve a desired result.


@end itemize

@end ifclear
